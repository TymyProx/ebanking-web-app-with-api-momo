"use server"; 
// Indique √† Next.js que ce fichier contient du code c√¥t√© serveur

import { cookies } from "next/headers";
// Importation de la m√©thode cookies() pour acc√©der aux cookies c√¥t√© serveur

// URL de base de l‚ÄôAPI et ID du tenant (identifiant du client dans l‚ÄôAPI)
const API_BASE_URL = "http://192.168.1.200:8080/api";
const tenantId = "11cacc69-5a49-4f01-8b16-e8f473746634";

// Fonction asynchrone pour soumettre une demande de cr√©dit
export async function submitCreditRequest(formData: {
  applicant_name: string;   // Nom du demandeur
  loan_amount: string;      // Montant du cr√©dit demand√©
  loan_duration: string;    // Dur√©e du cr√©dit en mois
  loan_purpose: string;     // Objet / raison du cr√©dit
}) {  
  try {
    // üîë R√©cup√©ration du token JWT stock√© dans les cookies
    const cookieToken = (await cookies()).get("token")?.value;
    const usertoken = cookieToken;

    // Si aucun token n‚Äôest trouv√© ‚Üí erreur
    if (!cookieToken) throw new Error("Token introuvable.");

    // Envoi de la requ√™te POST vers l‚ÄôAPI backend
    const response = await fetch(`${API_BASE_URL}/tenant/${tenantId}/demande-credit`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",        // Type de contenu JSON
        Authorization: `Bearer ${usertoken}`,      // Authentification via Bearer token
      },
      body: JSON.stringify({
        data: {
          //  Mapping des donn√©es du formulaire vers les champs attendus par l‚ÄôAPI
          applicantName: formData.applicant_name,
          creditAmount: formData.loan_amount,
          durationMonths: formData.loan_duration,
          purpose: formData.loan_purpose,
        },
      }),
    });

    // V√©rifie si la r√©ponse est valide
    if (!response.ok) {
      const errorData = await response.json();
      // Si le backend renvoie un message d‚Äôerreur, on le propage
      throw new Error(errorData.message || "Erreur lors de la soumission");
    }

    // R√©cup√©ration des donn√©es de la r√©ponse (JSON)
    const data = await response.json();
    return data;
  } catch (error: any) {
    // Gestion d‚Äôerreur (propagation du message d‚Äôerreur)
    throw new Error(error.message);
  }
}

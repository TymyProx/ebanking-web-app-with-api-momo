"use server"

import { z } from "zod"

const addExpenseSchema = z.object({
  fullName: z.string().min(1, "Le nom complet est requis"),
  account: z.string().min(1, "Le compte bancaire est requis"),
  email: z.string().email("Veuillez saisir une adresse email valide."),
  phone: z.string().min(10, "Le num√©ro de t√©l√©phone doit contenir au moins 10 chiffres"),
  category: z.string().min(1, "Choisissez une cat√©gorie de d√©pense."),
  amount: z.string().transform((val) => {
    const num = Number.parseFloat(val)
    if (num <= 0) throw new Error("Le montant doit √™tre sup√©rieur √† 0.")
    return num
  }),
  date: z.string().transform((val) => {
    const date = new Date(val)
    if (date > new Date()) throw new Error("La date de d√©pense ne peut pas √™tre post√©rieure √† aujourd'hui.")
    return date
  }),
  description: z.string().min(1, "La description est requise"),
})

const budgetSettingsSchema = z.object({
  monthlyIncome: z.string().transform((val) => {
    const num = Number.parseFloat(val)
    if (num <= 0) throw new Error("Le revenu mensuel doit √™tre sup√©rieur √† 0.")
    return num
  }),
  monthlyBudget: z.string().transform((val) => {
    const num = Number.parseFloat(val)
    if (num <= 0) throw new Error("L'objectif de d√©pense doit √™tre sup√©rieur √† 0.")
    return num
  }),
})

export async function addExpense(prevState: any, formData: FormData) {
  try {
    // Simulation d'attente
    await new Promise((resolve) => setTimeout(resolve, 1000))

    const validatedFields = addExpenseSchema.parse({
      fullName: formData.get("fullName"),
      account: formData.get("account"),
      email: formData.get("email"),
      phone: formData.get("phone"),
      category: formData.get("category"),
      amount: formData.get("amount"),
      date: formData.get("date"),
      description: formData.get("description"),
    })

    // Validation du format IBAN (simulation)
    const accountRegex = /^\d{4}-\d{6}-\d{2}$/
    if (!accountRegex.test(validatedFields.account)) {
      return {
        error: "Le format du num√©ro de compte n'est pas valide (format attendu: 0000-000000-00)",
        success: false,
      }
    }

    // Validation du t√©l√©phone (format guin√©en)
    const phoneRegex = /^\+224\s?\d{3}\s?\d{3}\s?\d{3}$/
    if (!phoneRegex.test(formData.get("phone") as string)) {
      return {
        error: "Le format du num√©ro de t√©l√©phone n'est pas valide (format attendu: +224 123 456 789)",
        success: false,
      }
    }

    // Simulation de v√©rification du budget
    const currentBudget = 2000000 // Budget mensuel simul√©
    const currentExpenses = 1800000 // D√©penses actuelles simul√©es
    const newTotal = currentExpenses + validatedFields.amount

    // Simulation de l'enregistrement en base de donn√©es
    //console.log("Nouvelle d√©pense enregistr√©e:", validatedFields)

    // Calcul du pourcentage d'utilisation du budget
    const budgetUsagePercent = Math.round((newTotal / currentBudget) * 100)
    const categoryName = getCategoryName(validatedFields.category)
    const remainingBudget = currentBudget - newTotal

    // Messages de feedback selon l'√©tat du budget
    let message = `‚úÖ Votre budget a √©t√© mis √† jour avec succ√®s. Vous avez utilis√© ${budgetUsagePercent}% de votre objectif mensuel.`
    let categoryMessage = `‚úÖ D√©pense ajout√©e √† la cat√©gorie '${categoryName}'. Il vous reste ${formatAmount(Math.max(0, remainingBudget))} GNF pour ce mois.`

    if (newTotal > currentBudget) {
      const overBudgetPercent = Math.round(((newTotal - currentBudget) / currentBudget) * 100)
      message = `‚ö†Ô∏è Attention : vous avez d√©pass√© votre budget mensuel de ${overBudgetPercent}%.`
      categoryMessage = `D√©pense ajout√©e √† la cat√©gorie '${categoryName}'. Vous √™tes maintenant ${formatAmount(newTotal - currentBudget)} GNF au-dessus de votre budget.`
    } else if (budgetUsagePercent > 80) {
      message = `‚ö†Ô∏è Attention : vous approchez de votre limite budg√©taire (${budgetUsagePercent}% utilis√©).`
    }

    return {
      success: true,
      message,
      categoryMessage,
      budgetData: {
        totalExpenses: newTotal,
        budgetUsagePercent,
        remainingBudget,
        isOverBudget: newTotal > currentBudget,
      },
      data: validatedFields,
    }
  } catch (error) {
    if (error instanceof z.ZodError) {
      const firstError = error.errors[0]
      return {
        error: firstError.message,
        success: false,
      }
    }

    return {
      error: "‚ùå Erreur de saisie. Veuillez v√©rifier les champs indiqu√©s.",
      success: false,
    }
  }
}

export async function updateBudgetSettings(formData: FormData) {
  try {
    // Simulation d'attente
    await new Promise((resolve) => setTimeout(resolve, 800))

    const validatedFields = budgetSettingsSchema.parse({
      monthlyIncome: formData.get("monthlyIncome"),
      monthlyBudget: formData.get("monthlyBudget"),
    })

    // Validation logique : le budget ne peut pas √™tre sup√©rieur au revenu
    if (validatedFields.monthlyBudget > validatedFields.monthlyIncome) {
      return {
        error: "L'objectif de d√©pense ne peut pas √™tre sup√©rieur au revenu mensuel.",
        success: false,
      }
    }

    // Simulation de v√©rification avec les d√©penses actuelles
    const currentExpenses = 1800000 // D√©penses actuelles simul√©es
    if (validatedFields.monthlyBudget < currentExpenses) {
      return {
        error: "Votre objectif est d√©j√† d√©pass√© par vos d√©penses actuelles.",
        success: false,
      }
    }

    // Simulation de la sauvegarde en base de donn√©es
    //console.log("Param√®tres budg√©taires mis √† jour:", validatedFields)

    // Log d'audit
    //console.log(`[AUDIT] Param√®tres budg√©taires mis √† jour - Client: USER123 √† ${new Date().toISOString()}`)

    return {
      success: true,
      message: "‚úÖ Votre budget a √©t√© mis √† jour avec succ√®s.",
      data: validatedFields,
    }
  } catch (error) {
    if (error instanceof z.ZodError) {
      const firstError = error.errors[0]
      return {
        error: firstError.message,
        success: false,
      }
    }

    return {
      error: "‚ùå Erreur lors de la mise √† jour des param√®tres budg√©taires.",
      success: false,
    }
  }
}

export async function getBudgetData(period = "month") {
  try {
    // Simulation d'attente
    await new Promise((resolve) => setTimeout(resolve, 500))

    // Simulation des donn√©es budg√©taires
    const budgetData = {
      monthlyIncome: 2500000,
      monthlyBudget: 2000000,
      totalExpenses: 1800000,
      expensesByCategory: [
        { category: "logement", amount: 800000, budget: 900000 },
        { category: "alimentation", amount: 450000, budget: 400000 },
        { category: "transport", amount: 220000, budget: 250000 },
        { category: "sante", amount: 75000, budget: 100000 },
        { category: "loisirs", amount: 155000, budget: 200000 },
        { category: "autres", amount: 100000, budget: 150000 },
      ],
      monthlyTrend: [
        { month: "Jan", budget: 2000000, expenses: 1850000 },
        { month: "F√©v", budget: 2000000, expenses: 1920000 },
        { month: "Mar", budget: 2000000, expenses: 1750000 },
        { month: "Avr", budget: 2000000, expenses: 2100000 },
        { month: "Mai", budget: 2000000, expenses: 1980000 },
        { month: "Juin", budget: 2000000, expenses: 1800000 },
      ],
    }

    // Calculs d√©riv√©s
    const budgetUsagePercent = Math.round((budgetData.totalExpenses / budgetData.monthlyBudget) * 100)
    const remainingBudget = budgetData.monthlyBudget - budgetData.totalExpenses
    const isOverBudget = budgetData.totalExpenses > budgetData.monthlyBudget
    const potentialSavings = budgetData.monthlyIncome - budgetData.totalExpenses

    return {
      success: true,
      data: {
        ...budgetData,
        budgetUsagePercent,
        remainingBudget,
        isOverBudget,
        potentialSavings,
      },
    }
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration des donn√©es budg√©taires:", error)
    return {
      success: false,
      error: "Impossible de r√©cup√©rer les donn√©es budg√©taires.",
    }
  }
}

export async function exportExpenses(format: string, category?: string, period?: string) {
  try {
    // Simulation d'attente
    await new Promise((resolve) => setTimeout(resolve, 1000))

    // Simulation de g√©n√©ration du fichier
    const filename = `budget_report_${period}_${new Date().toISOString().split("T")[0]}.${format}`

    //console.log(`G√©n√©ration du rapport budg√©taire ${filename} pour la cat√©gorie ${category || "toutes"}`)

    // Log d'audit
    //console.log(`[AUDIT] Export rapport budg√©taire - Format: ${format} - Client: USER123 √† ${new Date().toISOString()}`)

    return {
      success: true,
      filename,
      message: `Rapport budg√©taire ${format.toUpperCase()} g√©n√©r√© avec succ√®s`,
    }
  } catch (error) {
    console.error("Erreur lors de l'export:", error)
    return {
      success: false,
      error: "Impossible de g√©n√©rer le rapport budg√©taire",
    }
  }
}

// Fonction pour envoyer des alertes budg√©taires
export async function sendBudgetAlert(alertType: "approaching" | "exceeded", data: any) {
  try {
    // Simulation d'attente
    await new Promise((resolve) => setTimeout(resolve, 300))

    let message = ""
    const channels = ["email", "push"]

    if (alertType === "approaching") {
      message = `‚ö†Ô∏è Vous approchez de votre limite budg√©taire (${data.usagePercent}% utilis√©). Il vous reste ${formatAmount(data.remainingBudget)} GNF pour ce mois.`
    } else if (alertType === "exceeded") {
      message = `üö® Vous avez d√©pass√© votre budget mensuel de ${data.overBudgetPercent}%. D√©penses actuelles : ${formatAmount(data.totalExpenses)} GNF sur ${formatAmount(data.monthlyBudget)} GNF.`
      channels.push("sms") // SMS pour les d√©passements
    }

    // Simulation d'envoi des notifications
    //console.log(`[ALERT] ${alertType.toUpperCase()} - ${message}`)
    //console.log(`[CHANNELS] Envoy√© via: ${channels.join(", ")}`)

    // Log d'audit
    //console.log(
    //   `[AUDIT] Alerte budg√©taire envoy√©e - Type: ${alertType} - Client: USER123 √† ${new Date().toISOString()}`,
    // )

    return {
      success: true,
      message: "Alerte budg√©taire envoy√©e avec succ√®s",
      channels,
    }
  } catch (error) {
    console.error("Erreur lors de l'envoi de l'alerte budg√©taire:", error)
    return {
      success: false,
      error: "Impossible d'envoyer l'alerte budg√©taire",
    }
  }
}

// Fonctions utilitaires
function getCategoryName(categoryValue: string): string {
  const categories: Record<string, string> = {
    logement: "Logement",
    alimentation: "Alimentation",
    transport: "Transport",
    sante: "Sant√©",
    loisirs: "Loisirs",
    education: "√âducation",
    abonnements: "Abonnements",
    shopping: "Shopping",
    autres: "Autres",
  }
  return categories[categoryValue] || categoryValue
}

function formatAmount(amount: number): string {
  return new Intl.NumberFormat("fr-FR").format(amount)
}
